/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import accesoADatos.ReservaData;
import java.awt.Component;
import java.time.LocalDate;
import static java.time.temporal.ChronoUnit.DAYS;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import static vistas.ReservarHabitacion.elegir;
import static vistas.ReservarHabitacion.fechaIn;
import static vistas.ReservarHabitacion.fechaOut;
import static vistas.ReservarHabitacion.fechaTope;
import static vistas.ReservarHabitacion.habitacionActiva;
import static vistas.ReservarHabitacion.jlMostrarFechaIn;
import static vistas.ReservarHabitacion.jlMostrarFechaOut;

/**
 *
 * @author SANTIAGONB
 */
public class Calendario extends javax.swing.JPanel {

    private ReservaData resData;
    private static LocalDate fechaCheckIn;
    private static LocalDate fechaInAux;
    private static boolean in;
    private static int anio;
    private static int mes;
    private static boolean bisiesto;
    private static LocalDate fechaMin;
    private static HashMap<String, int[]> meses;
    private static List<LocalDate> fechasReservadas;

    public static LocalDate fechaActual;

    public static LocalDate fechaSeleccionada;

    /**
     * Creates new form Calendario
     */
    public Calendario(boolean in) {
        this.in = in;
        fechaCheckIn = null;
        fechaInAux = LocalDate.now();
        fechaTope = null;
        setLayout(null);
        setLocation(0, 0);
        setSize(460, 380);
        initComponents();

        fechaMin = LocalDate.of(2023, 1, 1);
        fechaActual = LocalDate.now();
        fechaSeleccionada = null;
        resData = new ReservaData();
        fechasReservadas = habitacionActiva.getFechasReservadas();

        armarComboMeses();
        armarComboAnio();

        inicio();
    }

    public Calendario(boolean in, LocalDate fechaCheckIn) {
        this.in = in;
        this.fechaCheckIn = fechaCheckIn;
        fechaInAux = fechaCheckIn;
        setLayout(null);
        setLocation(0, 0);
        setSize(460, 380);
        initComponents();

        fechaMin = LocalDate.of(2023, 1, 1);
        fechaActual = LocalDate.now();
        fechaSeleccionada = null;
        resData = new ReservaData();
        fechasReservadas = habitacionActiva.getFechasReservadas();

        armarComboMeses();
        armarComboAnio();

        inicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboMes = new javax.swing.JComboBox<>();
        comboAnio = new javax.swing.JComboBox<>();
        boton = new javax.swing.JButton();
        panelCalendario = new javax.swing.JPanel();
        domingo = new javax.swing.JLabel();
        lunes = new javax.swing.JLabel();
        martes = new javax.swing.JLabel();
        miercoles = new javax.swing.JLabel();
        jueves = new javax.swing.JLabel();
        viernes = new javax.swing.JLabel();
        sabado = new javax.swing.JLabel();
        jlFecha = new javax.swing.JLabel();
        jlSalir = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        comboMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMesActionPerformed(evt);
            }
        });

        comboAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAnioActionPerformed(evt);
            }
        });

        boton.setText("Seleccionar");
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        panelCalendario.setPreferredSize(new java.awt.Dimension(420, 240));

        javax.swing.GroupLayout panelCalendarioLayout = new javax.swing.GroupLayout(panelCalendario);
        panelCalendario.setLayout(panelCalendarioLayout);
        panelCalendarioLayout.setHorizontalGroup(
            panelCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );
        panelCalendarioLayout.setVerticalGroup(
            panelCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        domingo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        domingo.setText("Domingo");
        domingo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        domingo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        domingo.setPreferredSize(new java.awt.Dimension(60, 20));

        lunes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lunes.setText("Lunes");
        lunes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lunes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lunes.setPreferredSize(new java.awt.Dimension(60, 20));

        martes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        martes.setText("Martes");
        martes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        martes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        martes.setPreferredSize(new java.awt.Dimension(60, 20));

        miercoles.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        miercoles.setText("Miércoles");
        miercoles.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        miercoles.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jueves.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jueves.setText("Jueves");
        jueves.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jueves.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jueves.setPreferredSize(new java.awt.Dimension(60, 20));

        viernes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        viernes.setText("Viernes");
        viernes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        viernes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viernes.setPreferredSize(new java.awt.Dimension(60, 20));

        sabado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sabado.setText("Sábado");
        sabado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sabado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sabado.setPreferredSize(new java.awt.Dimension(60, 20));

        jlFecha.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jlFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jlSalir.setText("Salir");
        jlSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jlSalirActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizar.png"))); // NOI18N
        jButton1.setToolTipText("Actualizar calendario");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(comboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(domingo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(lunes, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(martes, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(miercoles, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(jueves, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(viernes, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(sabado, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(panelCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lunes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(martes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(domingo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(miercoles, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jueves, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(viernes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sabado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(panelCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jlFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed

        if (fechaSeleccionada != null) {
            if (in) {
                fechaIn = fechaSeleccionada;
                jlMostrarFechaIn.setText(fechaSeleccionada + "");
                for (LocalDate fechaInactiva : fechasReservadas) {
                    if (fechaTope == null && fechaInactiva.isAfter(fechaSeleccionada)) {
                        fechaTope = fechaInactiva;
                    }
                }
                elegir.dispose();

            } else {
                fechaOut = fechaSeleccionada;
                jlMostrarFechaOut.setText(fechaSeleccionada + "");
            }

            elegir.dispose();
        } else {
            JOptionPane.showMessageDialog(null, "Debe elegir una fecha");
        }

    }//GEN-LAST:event_botonActionPerformed

    private void comboMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMesActionPerformed
        inicio();
    }//GEN-LAST:event_comboMesActionPerformed

    private void comboAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAnioActionPerformed
        inicio();
    }//GEN-LAST:event_comboAnioActionPerformed

    private void jlSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jlSalirActionPerformed
        elegir.dispose();
    }//GEN-LAST:event_jlSalirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        inicio();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton;
    private static javax.swing.JComboBox<Integer> comboAnio;
    private static javax.swing.JComboBox<String> comboMes;
    private javax.swing.JLabel domingo;
    private javax.swing.JButton jButton1;
    public static javax.swing.JLabel jlFecha;
    private javax.swing.JButton jlSalir;
    private javax.swing.JLabel jueves;
    private javax.swing.JLabel lunes;
    private javax.swing.JLabel martes;
    private javax.swing.JLabel miercoles;
    private static javax.swing.JPanel panelCalendario;
    private javax.swing.JLabel sabado;
    private javax.swing.JLabel viernes;
    // End of variables declaration//GEN-END:variables

    private static void inicio() {

        try {
            armarPanel();
        } catch (NullPointerException np) {
        }
    }

    private static void armarPanel() {

        panelCalendario.removeAll();
        panelCalendario.repaint();
        (new Thread() {
            @Override
            public void run() {
                try {
                    Thread.sleep(10);
                    anio = (int) comboAnio.getSelectedItem();
                    if (anio % 4 == 0 && anio % 400 == 0 || anio % 4 == 0 && anio % 100 != 0) {
                        bisiesto = true;
                    } else {
                        bisiesto = false;
                    }

                    String mesNombre = (String) comboMes.getSelectedItem();
                    mes = meses.get(mesNombre)[0];
                    int diasMes = meses.get(mesNombre)[1];

                    if (mesNombre.equals("Febrero") && bisiesto) {
                        diasMes++;
                    }

                    LocalDate fechaInicio = LocalDate.of(anio, mes, 1);
                    int posicionInicial = (int) DAYS.between(fechaMin, fechaInicio) % 7;
                    boolean disponible;
                    boolean trancada;

                    for (int i = 0; i < diasMes; i++) {
                        int posicion = i + posicionInicial;
                        int columna = posicion % 7;
                        int fila = posicion / 7;
                        int x = columna * 60;
                        int y = fila * 40;
                        JPanel panelDia = new JPanel();
                        panelDia.setBounds(x, y, 60, 40);
                        panelDia.setLayout(null);
                        LocalDate fechaAux = fechaInicio.plusDays(i);

                        disponible = true;
                        trancada = false;

                        if (fechaAux.isBefore(fechaActual) || fechaAux.isBefore(fechaInAux) || (fechaAux.equals(fechaInAux) && !in) || fechaAux.isAfter(LocalDate.now().plusYears(1))) {
                            disponible = false;
                        } else {
                            if (fechaTope != null) {
                                if (!fechaAux.isBefore(fechaTope)) {
                                    trancada = true;
                                }
                            }
//
                            for (LocalDate fechaInactiva : fechasReservadas) {

                                boolean coincidencia;

                                int anioIn = fechaInactiva.getYear();
                                int mesIn = fechaInactiva.getMonthValue();
                                int diaIn = fechaInactiva.getDayOfMonth();

                                int anioF = fechaAux.getYear();
                                int mesF = fechaAux.getMonthValue();
                                int diaF = fechaAux.getDayOfMonth();

                                coincidencia = (anioF == anioIn && mesF == mesIn && diaF == diaIn);

                                if (coincidencia) {
                                    disponible = false;
                                    if (fechaCheckIn != null) {
                                        trancada = true;
                                    }
                                    break;
                                }
                            }

                        }

                        panelDia.add(new CuadroFecha(fechaAux, disponible, trancada));
                        panelCalendario.add(panelDia);

                    }
                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(null, "Error de interrupcion");
                } catch (NullPointerException np) {

                }

            }

        }).start();

    }

    private void armarComboMeses() {
        meses = new HashMap<>();
        meses.put("Enero", new int[]{1, 31});
        meses.put("Febrero", new int[]{2, 28});
        meses.put("Marzo", new int[]{3, 31});
        meses.put("Abril", new int[]{4, 30});
        meses.put("Mayo", new int[]{5, 31});
        meses.put("Junio", new int[]{6, 30});
        meses.put("Julio", new int[]{7, 31});
        meses.put("Agosto", new int[]{8, 31});
        meses.put("Septiembre", new int[]{9, 30});
        meses.put("Octubre", new int[]{10, 31});
        meses.put("Noviembre", new int[]{11, 30});
        meses.put("Diciembre", new int[]{12, 31});

        ArrayList<String> nombreMeses = new ArrayList<>();

        meses.forEach((mes, orden) -> {
            int n = orden[0];
            String s;
            if (n < 10) {
                s = "0" + n;
            } else {
                s = "" + n;
            }
            nombreMeses.add(s + " " + mes);
        });

        Collections.sort(nombreMeses);

        for (String mes : nombreMeses) {
            comboMes.addItem(mes.substring(3));

            int nMes = fechaActual.getMonthValue();
            String sMes;
            if (nMes < 10) {
                sMes = "0" + nMes;
            } else {
                sMes = nMes + "";
            }
            if (mes.substring(0, 2).equals(sMes)) {
                comboMes.setSelectedIndex(nMes - 1);
            }

        }

    }

    private void armarComboAnio() {

        int anioMin = fechaMin.getYear();
        int anioActual = fechaActual.getYear();

        for (int i = anioMin; i <= anioActual + 1; i++) {
            comboAnio.addItem(i);
        }

        comboAnio.setSelectedIndex(anioActual - anioMin);

    }

    public static void seleccionarFecha(LocalDate f) {
        fechaSeleccionada = f;
        jlFecha.setText(fechaSeleccionada + "");
        actualizarSeleccion();
    }

    public static void actualizarSeleccion() {

        Component[] paneles = panelCalendario.getComponents();

        for (Component panel : paneles) {
            CuadroFecha cuadro = (CuadroFecha) panel.getComponentAt(0, 0);
            if (cuadro.getFecha().equals(fechaSeleccionada)) {
                cuadro.seleccionar();
            } else {
                cuadro.deseleccionar();
            }
        }

    }

}
